"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@auth";
exports.ids = ["vendor-chunks/@auth"];
exports.modules = {

/***/ "(rsc)/../../node_modules/@auth/kysely-adapter/index.js":
/*!********************************************************!*\
  !*** ../../node_modules/@auth/kysely-adapter/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KyselyAdapter: () => (/* binding */ KyselyAdapter),\n/* harmony export */   KyselyAuth: () => (/* binding */ KyselyAuth),\n/* harmony export */   format: () => (/* binding */ format)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/dialect/sqlite/sqlite-adapter.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/kysely.js\");\n/**\n * <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", padding: 16}}>\n *  <p style={{fontWeight: \"normal\"}}>Official <a href=\"https://kysely.dev/\">Kysely</a> adapter for Auth.js / NextAuth.js.</p>\n *  <a href=\"https://kysely.dev/\">\n *   <img style={{display: \"block\"}} src=\"/img/adapters/kysely.svg\" width=\"38\" />\n *  </a>\n * </div>\n *\n * ## Installation\n *\n * ```bash npm2yarn\n * npm install kysely @auth/kysely-adapter\n * ```\n *\n * @module @auth/kysely-adapter\n */\n\n// https://github.com/honeinc/is-iso-date/blob/master/index.js\nconst isoDateRE = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/;\nfunction isDate(value) {\n    return value && isoDateRE.test(value) && !isNaN(Date.parse(value));\n}\nconst format = {\n    from(object) {\n        const newObject = {};\n        for (const key in object) {\n            const value = object[key];\n            if (isDate(value))\n                newObject[key] = new Date(value);\n            else\n                newObject[key] = value;\n        }\n        return newObject;\n    },\n    to(object) {\n        const newObject = {};\n        for (const [key, value] of Object.entries(object))\n            newObject[key] = value instanceof Date ? value.toISOString() : value;\n        return newObject;\n    },\n};\n/**\n *\n * ## Setup\n *\n * This adapter supports the same first party dialects that Kysely (as of v0.24.2) supports: PostgreSQL, MySQL, and SQLite. The examples below use PostgreSQL with the [pg](https://www.npmjs.com/package/pg) client.\n *\n *  ```bash npm2yarn\n * npm install pg\n * npm install --save-dev @types/pg\n * ```\n *\n * ```typescript title=\"pages/api/auth/[...nextauth].ts\"\n * import NextAuth from \"next-auth\"\n * import GoogleProvider from \"next-auth/providers/google\"\n * import { KyselyAdapter } from \"@auth/kysely-adapter\"\n * import { db } from \"../../../db\"\n *\n * export default NextAuth({\n *   adapter: KyselyAdapter(db),\n *   providers: [\n *     GoogleProvider({\n *       clientId: process.env.GOOGLE_CLIENT_ID,\n *       clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n *     }),\n *   ],\n * })\n * ```\n *\n * Kysely's constructor requires a database interface that contains an entry with an interface for each of your tables. You can define these types manually, or use `kysely-codegen` / `prisma-kysely` to automatically generate them. Check out the default [models](/reference/core/adapters#models) required by Auth.js.\n *\n * ```ts title=\"db.ts\"\n * import { PostgresDialect } from \"kysely\"\n * import { Pool } from \"pg\"\n *\n * // This adapter exports a wrapper of the original `Kysely` class called `KyselyAuth`,\n * // that can be used to provide additional type-safety.\n * // While using it isn't required, it is recommended as it will verify\n * // that the database interface has all the fields that Auth.js expects.\n * import { KyselyAuth } from \"@auth/kysely-adapter\"\n *\n * import type { GeneratedAlways } from \"kysely\"\n *\n * interface Database {\n *   User: {\n *     id: GeneratedAlways<string>\n *     name: string | null\n *     email: string\n *     emailVerified: Date | null\n *     image: string | null\n *   }\n *   Account: {\n *     id: GeneratedAlways<string>\n *     userId: string\n *     type: string\n *     provider: string\n *     providerAccountId: string\n *     refresh_token: string | null\n *     access_token: string | null\n *     expires_at: number | null\n *     token_type: string | null\n *     scope: string | null\n *     id_token: string | null\n *     session_state: string | null\n *   }\n *   Session: {\n *     id: GeneratedAlways<string>\n *     userId: string\n *     sessionToken: string\n *     expires: Date\n *   }\n *   VerificationToken: {\n *     identifier: string\n *     token: string\n *     expires: Date\n *   }\n * }\n *\n * export const db = new KyselyAuth<Database>({\n *   dialect: new PostgresDialect({\n *     pool: new Pool({\n *       host: process.env.DATABASE_HOST,\n *       database: process.env.DATABASE_NAME,\n *       user: process.env.DATABASE_USER,\n *       password: process.env.DATABASE_PASSWORD,\n *     }),\n *   }),\n * })\n```\n *\n *\n * :::note\n * An alternative to manually defining types is generating them from the database schema using [kysely-codegen](https://github.com/RobinBlomberg/kysely-codegen), or from Prisma schemas using [prisma-kysely](https://github.com/valtyr/prisma-kysely). When using generated types with `KyselyAuth`, import `Codegen` and pass it as the second generic arg:\n * ```ts\n * import type { Codegen } from \"@auth/kysely-adapter\"\n * new KyselyAuth<Database, Codegen>(...)\n * ```\n * :::\n * ### Schema\n * ```ts title=\"db/migrations/001_create_db.ts\"\n * import { Kysely, sql } from \"kysely\"\n *\n * export async function up(db: Kysely<any>): Promise<void> {\n *   await db.schema\n *     .createTable(\"User\")\n *     .addColumn(\"id\", \"uuid\", (col) =>\n *       col.primaryKey().defaultTo(sql`gen_random_uuid()`)\n *     )\n *     .addColumn(\"name\", \"text\")\n *     .addColumn(\"email\", \"text\", (col) => col.unique().notNull())\n *     .addColumn(\"emailVerified\", \"timestamptz\")\n *     .addColumn(\"image\", \"text\")\n *     .execute()\n *\n *   await db.schema\n *     .createTable(\"Account\")\n *     .addColumn(\"id\", \"uuid\", (col) =>\n *       col.primaryKey().defaultTo(sql`gen_random_uuid()`)\n *     )\n *     .addColumn(\"userId\", \"uuid\", (col) =>\n *       col.references(\"User.id\").onDelete(\"cascade\").notNull()\n *     )\n *     .addColumn(\"type\", \"text\", (col) => col.notNull())\n *     .addColumn(\"provider\", \"text\", (col) => col.notNull())\n *     .addColumn(\"providerAccountId\", \"text\", (col) => col.notNull())\n *     .addColumn(\"refresh_token\", \"text\")\n *     .addColumn(\"access_token\", \"text\")\n *     .addColumn(\"expires_at\", \"bigint\")\n *     .addColumn(\"token_type\", \"text\")\n *     .addColumn(\"scope\", \"text\")\n *     .addColumn(\"id_token\", \"text\")\n *     .addColumn(\"session_state\", \"text\")\n *     .execute()\n *\n *   await db.schema\n *     .createTable(\"Session\")\n *     .addColumn(\"id\", \"uuid\", (col) =>\n *       col.primaryKey().defaultTo(sql`gen_random_uuid()`)\n *     )\n *     .addColumn(\"userId\", \"uuid\", (col) =>\n *       col.references(\"User.id\").onDelete(\"cascade\").notNull()\n *     )\n *     .addColumn(\"sessionToken\", \"text\", (col) => col.notNull().unique())\n *     .addColumn(\"expires\", \"timestamptz\", (col) => col.notNull())\n *     .execute()\n *\n *   await db.schema\n *     .createTable(\"VerificationToken\")\n *     .addColumn(\"identifier\", \"text\", (col) => col.notNull())\n *     .addColumn(\"token\", \"text\", (col) => col.notNull().unique())\n *     .addColumn(\"expires\", \"timestamptz\", (col) => col.notNull())\n *     .execute()\n *\n *   await db.schema\n *     .createIndex(\"Account_userId_index\")\n *     .on(\"Account\")\n *     .column(\"userId\")\n *     .execute()\n *\n *   await db.schema\n *     .createIndex(\"Session_userId_index\")\n *     .on(\"Session\")\n *     .column(\"userId\")\n *     .execute()\n * }\n *\n * export async function down(db: Kysely<any>): Promise<void> {\n *   await db.schema.dropTable(\"Account\").ifExists().execute()\n *   await db.schema.dropTable(\"Session\").ifExists().execute()\n *   await db.schema.dropTable(\"User\").ifExists().execute()\n *   await db.schema.dropTable(\"VerificationToken\").ifExists().execute()\n * }\n * ```\n * > This schema is adapted for use in Kysely and is based upon our main [schema](/reference/core/adapters#models).\n *\n * For more information about creating and running migrations with Kysely, refer to the [Kysely migrations documentation](https://kysely.dev/docs/migrations).\n *\n * ### Naming conventions\n * If mixed snake_case and camelCase column names is an issue for you and/or your underlying database system, we recommend using Kysely's `CamelCasePlugin` ([see the documentation here](https://kysely-org.github.io/kysely-apidoc/classes/CamelCasePlugin.html)) feature to change the field names. This won't affect NextAuth.js, but will allow you to have consistent casing when using Kysely.\n */\nfunction KyselyAdapter(db) {\n    const { adapter } = db.getExecutor();\n    const { supportsReturning } = adapter;\n    const isSqlite = adapter instanceof kysely__WEBPACK_IMPORTED_MODULE_0__.SqliteAdapter;\n    /** If the database is SQLite, turn dates into an ISO string  */\n    const to = isSqlite ? format.to : (x) => x;\n    /** If the database is SQLite, turn ISO strings into dates */\n    const from = isSqlite ? format.from : (x) => x;\n    return {\n        async createUser(data) {\n            const user = { ...data, id: crypto.randomUUID() };\n            await db.insertInto(\"User\").values(to(user)).executeTakeFirstOrThrow();\n            return user;\n        },\n        async getUser(id) {\n            const result = await db\n                .selectFrom(\"User\")\n                .selectAll()\n                .where(\"id\", \"=\", id)\n                .executeTakeFirst();\n            if (!result)\n                return null;\n            return from(result);\n        },\n        async getUserByEmail(email) {\n            const result = await db\n                .selectFrom(\"User\")\n                .selectAll()\n                .where(\"email\", \"=\", email)\n                .executeTakeFirst();\n            if (!result)\n                return null;\n            return from(result);\n        },\n        async getUserByAccount({ providerAccountId, provider }) {\n            const result = await db\n                .selectFrom(\"User\")\n                .innerJoin(\"Account\", \"User.id\", \"Account.userId\")\n                .selectAll(\"User\")\n                .where(\"Account.providerAccountId\", \"=\", providerAccountId)\n                .where(\"Account.provider\", \"=\", provider)\n                .executeTakeFirst();\n            if (!result)\n                return null;\n            return from(result);\n        },\n        async updateUser({ id, ...user }) {\n            const userData = to(user);\n            const query = db.updateTable(\"User\").set(userData).where(\"id\", \"=\", id);\n            const result = supportsReturning\n                ? query.returningAll().executeTakeFirstOrThrow()\n                : query\n                    .executeTakeFirstOrThrow()\n                    .then(() => db\n                    .selectFrom(\"User\")\n                    .selectAll()\n                    .where(\"id\", \"=\", id)\n                    .executeTakeFirstOrThrow());\n            return from(await result);\n        },\n        async deleteUser(userId) {\n            await db\n                .deleteFrom(\"User\")\n                .where(\"User.id\", \"=\", userId)\n                .executeTakeFirst();\n        },\n        async linkAccount(account) {\n            await db\n                .insertInto(\"Account\")\n                .values(to(account))\n                .executeTakeFirstOrThrow();\n            return account;\n        },\n        async unlinkAccount({ providerAccountId, provider }) {\n            await db\n                .deleteFrom(\"Account\")\n                .where(\"Account.providerAccountId\", \"=\", providerAccountId)\n                .where(\"Account.provider\", \"=\", provider)\n                .executeTakeFirstOrThrow();\n        },\n        async createSession(session) {\n            await db.insertInto(\"Session\").values(to(session)).execute();\n            return session;\n        },\n        async getSessionAndUser(sessionToken) {\n            const result = await db\n                .selectFrom(\"Session\")\n                .innerJoin(\"User\", \"User.id\", \"Session.userId\")\n                .selectAll(\"User\")\n                .select([\"Session.expires\", \"Session.userId\"])\n                .where(\"Session.sessionToken\", \"=\", sessionToken)\n                .executeTakeFirst();\n            if (!result)\n                return null;\n            const { userId, expires, ...user } = result;\n            const session = { sessionToken, userId, expires };\n            return { user: from(user), session: from(session) };\n        },\n        async updateSession(session) {\n            const sessionData = to(session);\n            const query = db\n                .updateTable(\"Session\")\n                .set(sessionData)\n                .where(\"Session.sessionToken\", \"=\", session.sessionToken);\n            const result = supportsReturning\n                ? await query.returningAll().executeTakeFirstOrThrow()\n                : await query.executeTakeFirstOrThrow().then(async () => {\n                    return await db\n                        .selectFrom(\"Session\")\n                        .selectAll()\n                        .where(\"Session.sessionToken\", \"=\", sessionData.sessionToken)\n                        .executeTakeFirstOrThrow();\n                });\n            return from(result);\n        },\n        async deleteSession(sessionToken) {\n            await db\n                .deleteFrom(\"Session\")\n                .where(\"Session.sessionToken\", \"=\", sessionToken)\n                .executeTakeFirstOrThrow();\n        },\n        async createVerificationToken(data) {\n            await db.insertInto(\"VerificationToken\").values(to(data)).execute();\n            return data;\n        },\n        async useVerificationToken({ identifier, token }) {\n            const query = db\n                .deleteFrom(\"VerificationToken\")\n                .where(\"VerificationToken.token\", \"=\", token)\n                .where(\"VerificationToken.identifier\", \"=\", identifier);\n            const result = supportsReturning\n                ? await query.returningAll().executeTakeFirst()\n                : await db\n                    .selectFrom(\"VerificationToken\")\n                    .selectAll()\n                    .where(\"token\", \"=\", token)\n                    .executeTakeFirst()\n                    .then(async (res) => {\n                    await query.executeTakeFirst();\n                    return res;\n                });\n            if (!result)\n                return null;\n            return from(result);\n        },\n    };\n}\n/**\n * Wrapper over the original `Kysely` class in order to validate the passed in\n * database interface. A regular Kysely instance may also be used, but wrapping\n * it ensures the database interface implements the fields that Auth.js\n * requires. When used with `kysely-codegen`, the `Codegen` type can be passed as\n * the second generic argument. The generated types will be used, and\n * `KyselyAuth` will only verify that the correct fields exist.\n */\nclass KyselyAuth extends kysely__WEBPACK_IMPORTED_MODULE_1__.Kysely {\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@auth/kysely-adapter/index.js\n");

/***/ })

};
;