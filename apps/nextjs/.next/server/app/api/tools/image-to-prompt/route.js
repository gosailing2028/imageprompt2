"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/tools/image-to-prompt/route";
exports.ids = ["app/api/tools/image-to-prompt/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftools%2Fimage-to-prompt%2Froute&page=%2Fapi%2Ftools%2Fimage-to-prompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftools%2Fimage-to-prompt%2Froute.ts&appDir=D%3A%5Cweb_sailing%5CimagePrompt-main%5CimagePrompt-main%5Capps%5Cnextjs%5Csrc%5Capp&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=D%3A%5Cweb_sailing%5CimagePrompt-main%5CimagePrompt-main%5Capps%5Cnextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftools%2Fimage-to-prompt%2Froute&page=%2Fapi%2Ftools%2Fimage-to-prompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftools%2Fimage-to-prompt%2Froute.ts&appDir=D%3A%5Cweb_sailing%5CimagePrompt-main%5CimagePrompt-main%5Capps%5Cnextjs%5Csrc%5Capp&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=D%3A%5Cweb_sailing%5CimagePrompt-main%5CimagePrompt-main%5Capps%5Cnextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/../../node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_web_sailing_imagePrompt_main_imagePrompt_main_apps_nextjs_src_app_api_tools_image_to_prompt_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/tools/image-to-prompt/route.ts */ \"(rsc)/./src/app/api/tools/image-to-prompt/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/tools/image-to-prompt/route\",\n        pathname: \"/api/tools/image-to-prompt\",\n        filename: \"route\",\n        bundlePath: \"app/api/tools/image-to-prompt/route\"\n    },\n    resolvedPagePath: \"D:\\\\web_sailing\\\\imagePrompt-main\\\\imagePrompt-main\\\\apps\\\\nextjs\\\\src\\\\app\\\\api\\\\tools\\\\image-to-prompt\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_web_sailing_imagePrompt_main_imagePrompt_main_apps_nextjs_src_app_api_tools_image_to_prompt_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/tools/image-to-prompt/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyLmpzP25hbWU9YXBwJTJGYXBpJTJGdG9vbHMlMkZpbWFnZS10by1wcm9tcHQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnRvb2xzJTJGaW1hZ2UtdG8tcHJvbXB0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdG9vbHMlMkZpbWFnZS10by1wcm9tcHQlMkZyb3V0ZS50cyZhcHBEaXI9RCUzQSU1Q3dlYl9zYWlsaW5nJTVDaW1hZ2VQcm9tcHQtbWFpbiU1Q2ltYWdlUHJvbXB0LW1haW4lNUNhcHBzJTVDbmV4dGpzJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz1tZHgmcm9vdERpcj1EJTNBJTVDd2ViX3NhaWxpbmclNUNpbWFnZVByb21wdC1tYWluJTVDaW1hZ2VQcm9tcHQtbWFpbiU1Q2FwcHMlNUNuZXh0anMmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNrRTtBQUMvSTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL0BzYWFzZmx5L25leHRqcy8/ZjllNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJEOlxcXFx3ZWJfc2FpbGluZ1xcXFxpbWFnZVByb21wdC1tYWluXFxcXGltYWdlUHJvbXB0LW1haW5cXFxcYXBwc1xcXFxuZXh0anNcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcdG9vbHNcXFxcaW1hZ2UtdG8tcHJvbXB0XFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdG9vbHMvaW1hZ2UtdG8tcHJvbXB0L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdG9vbHMvaW1hZ2UtdG8tcHJvbXB0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS90b29scy9pbWFnZS10by1wcm9tcHQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJEOlxcXFx3ZWJfc2FpbGluZ1xcXFxpbWFnZVByb21wdC1tYWluXFxcXGltYWdlUHJvbXB0LW1haW5cXFxcYXBwc1xcXFxuZXh0anNcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcdG9vbHNcXFxcaW1hZ2UtdG8tcHJvbXB0XFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS90b29scy9pbWFnZS10by1wcm9tcHQvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftools%2Fimage-to-prompt%2Froute&page=%2Fapi%2Ftools%2Fimage-to-prompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftools%2Fimage-to-prompt%2Froute.ts&appDir=D%3A%5Cweb_sailing%5CimagePrompt-main%5CimagePrompt-main%5Capps%5Cnextjs%5Csrc%5Capp&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=D%3A%5Cweb_sailing%5CimagePrompt-main%5CimagePrompt-main%5Capps%5Cnextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/tools/image-to-prompt/route.ts":
/*!****************************************************!*\
  !*** ./src/app/api/tools/image-to-prompt/route.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/../../node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_coze_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/lib/coze-api */ \"(rsc)/./src/lib/coze-api.ts\");\n\n\nasync function POST(request) {\n    try {\n        const formData = await request.formData();\n        const imageFile = formData.get(\"img\"); // Changed from image to img\n        const promptType = formData.get(\"promptType\");\n        const userQuery = formData.get(\"userQuery\");\n        if (!imageFile) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"No image file provided\"\n            }, {\n                status: 400\n            });\n        }\n        // Check if API is configured\n        if (!_lib_coze_api__WEBPACK_IMPORTED_MODULE_1__.cozeAPI.isConfigured()) {\n            console.error(\"Coze API is not configured\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"API configuration missing. Please set COZE_API_KEY and COZE_WORKFLOW_ID in environment variables.\"\n            }, {\n                status: 500\n            });\n        }\n        // Generate prompt using Coze API\n        const generatedPrompt = await _lib_coze_api__WEBPACK_IMPORTED_MODULE_1__.cozeAPI.generatePromptFromImage(imageFile, {\n            model: promptType || \"normal\",\n            userQuery: userQuery || \"Generate a detailed AI image prompt for this image\"\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            prompt: generatedPrompt\n        });\n    } catch (error) {\n        console.error(\"Error in image-to-prompt API:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Internal server error\",\n            details:  true ? error : 0\n        }, {\n            status: 500\n        });\n    }\n}\n// GET endpoint to check API configuration status\nasync function GET() {\n    const isConfigured = _lib_coze_api__WEBPACK_IMPORTED_MODULE_1__.cozeAPI.isConfigured();\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        status: isConfigured ? \"configured\" : \"not_configured\",\n        message: isConfigured ? \"Coze API is properly configured\" : \"Please configure COZE_API_KEY and COZE_WORKFLOW_ID in environment variables\",\n        demo_mode: !isConfigured && \"development\" === \"development\",\n        environment: \"development\"\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS90b29scy9pbWFnZS10by1wcm9tcHQvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUNmO0FBRWxDLGVBQWVFLEtBQUtDLE9BQW9CO0lBQzdDLElBQUk7UUFDRixNQUFNQyxXQUFXLE1BQU1ELFFBQVFDLFFBQVE7UUFDdkMsTUFBTUMsWUFBWUQsU0FBU0UsR0FBRyxDQUFDLFFBQWlCLDRCQUE0QjtRQUM1RSxNQUFNQyxhQUFhSCxTQUFTRSxHQUFHLENBQUM7UUFDaEMsTUFBTUUsWUFBWUosU0FBU0UsR0FBRyxDQUFDO1FBRS9CLElBQUksQ0FBQ0QsV0FBVztZQUNkLE9BQU9MLHFEQUFZQSxDQUFDUyxJQUFJLENBQ3RCO2dCQUFFQyxPQUFPO1lBQXlCLEdBQ2xDO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7UUFFQSw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDVixrREFBT0EsQ0FBQ1csWUFBWSxJQUFJO1lBQzNCQyxRQUFRSCxLQUFLLENBQUM7WUFDZCxPQUFPVixxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtnQkFBRUMsT0FBTztZQUFvRyxHQUM3RztnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsaUNBQWlDO1FBQ2pDLE1BQU1HLGtCQUFrQixNQUFNYixrREFBT0EsQ0FBQ2MsdUJBQXVCLENBQUNWLFdBQVc7WUFDdkVXLE9BQU9ULGNBQWM7WUFDckJDLFdBQVdBLGFBQWE7UUFDMUI7UUFFQSxPQUFPUixxREFBWUEsQ0FBQ1MsSUFBSSxDQUFDO1lBQ3ZCUSxTQUFTO1lBQ1RDLFFBQVFKO1FBQ1Y7SUFFRixFQUFFLE9BQU9KLE9BQU87UUFDZEcsUUFBUUgsS0FBSyxDQUFDLGlDQUFpQ0E7UUFFL0MsT0FBT1YscURBQVlBLENBQUNTLElBQUksQ0FDdEI7WUFDRUMsT0FBT0EsaUJBQWlCUyxRQUFRVCxNQUFNVSxPQUFPLEdBQUc7WUFDaERDLFNBQVNDLEtBQXNDLEdBQUdaLFFBQVFhLENBQVNBO1FBQ3JFLEdBQ0E7WUFBRVosUUFBUTtRQUFJO0lBRWxCO0FBQ0Y7QUFFQSxpREFBaUQ7QUFDMUMsZUFBZWE7SUFDcEIsTUFBTVosZUFBZVgsa0RBQU9BLENBQUNXLFlBQVk7SUFFekMsT0FBT1oscURBQVlBLENBQUNTLElBQUksQ0FBQztRQUN2QkUsUUFBUUMsZUFBZSxlQUFlO1FBQ3RDUSxTQUFTUixlQUNMLG9DQUNBO1FBQ0phLFdBQVcsQ0FBQ2IsZ0JBQWdCVSxrQkFBeUI7UUFDckRJLGFBNURKO0lBNkRFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2Fhc2ZseS9uZXh0anMvLi9zcmMvYXBwL2FwaS90b29scy9pbWFnZS10by1wcm9tcHQvcm91dGUudHM/MjI3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSBcIm5leHQvc2VydmVyXCI7XG5pbXBvcnQgeyBjb3plQVBJIH0gZnJvbSBcIn4vbGliL2NvemUtYXBpXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZm9ybURhdGEgPSBhd2FpdCByZXF1ZXN0LmZvcm1EYXRhKCk7XG4gICAgY29uc3QgaW1hZ2VGaWxlID0gZm9ybURhdGEuZ2V0KFwiaW1nXCIpIGFzIEZpbGU7ICAvLyBDaGFuZ2VkIGZyb20gaW1hZ2UgdG8gaW1nXG4gICAgY29uc3QgcHJvbXB0VHlwZSA9IGZvcm1EYXRhLmdldChcInByb21wdFR5cGVcIikgYXMgc3RyaW5nO1xuICAgIGNvbnN0IHVzZXJRdWVyeSA9IGZvcm1EYXRhLmdldChcInVzZXJRdWVyeVwiKSBhcyBzdHJpbmc7XG4gICAgXG4gICAgaWYgKCFpbWFnZUZpbGUpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogXCJObyBpbWFnZSBmaWxlIHByb3ZpZGVkXCIgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIEFQSSBpcyBjb25maWd1cmVkXG4gICAgaWYgKCFjb3plQVBJLmlzQ29uZmlndXJlZCgpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQ296ZSBBUEkgaXMgbm90IGNvbmZpZ3VyZWRcIik7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6IFwiQVBJIGNvbmZpZ3VyYXRpb24gbWlzc2luZy4gUGxlYXNlIHNldCBDT1pFX0FQSV9LRVkgYW5kIENPWkVfV09SS0ZMT1dfSUQgaW4gZW52aXJvbm1lbnQgdmFyaWFibGVzLlwiIH0sXG4gICAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBwcm9tcHQgdXNpbmcgQ296ZSBBUElcbiAgICBjb25zdCBnZW5lcmF0ZWRQcm9tcHQgPSBhd2FpdCBjb3plQVBJLmdlbmVyYXRlUHJvbXB0RnJvbUltYWdlKGltYWdlRmlsZSwge1xuICAgICAgbW9kZWw6IHByb21wdFR5cGUgfHwgXCJub3JtYWxcIiwgIC8vIFRoaXMgd2lsbCBiZSBwYXNzZWQgYXMgcHJvbXB0VHlwZSBpbiB0aGUgd29ya2Zsb3cgLSBub3JtYWwvZmx1eC9taWRqb3VuZXkvc3RhYmxlRGlmZnVzaW9uXG4gICAgICB1c2VyUXVlcnk6IHVzZXJRdWVyeSB8fCBcIkdlbmVyYXRlIGEgZGV0YWlsZWQgQUkgaW1hZ2UgcHJvbXB0IGZvciB0aGlzIGltYWdlXCIsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHByb21wdDogZ2VuZXJhdGVkUHJvbXB0LFxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGltYWdlLXRvLXByb21wdCBBUEk6XCIsIGVycm9yKTtcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBcIkludGVybmFsIHNlcnZlciBlcnJvclwiLFxuICAgICAgICBkZXRhaWxzOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiID8gZXJyb3IgOiB1bmRlZmluZWQsXG4gICAgICB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuXG4vLyBHRVQgZW5kcG9pbnQgdG8gY2hlY2sgQVBJIGNvbmZpZ3VyYXRpb24gc3RhdHVzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICBjb25zdCBpc0NvbmZpZ3VyZWQgPSBjb3plQVBJLmlzQ29uZmlndXJlZCgpO1xuICBcbiAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICBzdGF0dXM6IGlzQ29uZmlndXJlZCA/IFwiY29uZmlndXJlZFwiIDogXCJub3RfY29uZmlndXJlZFwiLFxuICAgIG1lc3NhZ2U6IGlzQ29uZmlndXJlZCBcbiAgICAgID8gXCJDb3plIEFQSSBpcyBwcm9wZXJseSBjb25maWd1cmVkXCIgXG4gICAgICA6IFwiUGxlYXNlIGNvbmZpZ3VyZSBDT1pFX0FQSV9LRVkgYW5kIENPWkVfV09SS0ZMT1dfSUQgaW4gZW52aXJvbm1lbnQgdmFyaWFibGVzXCIsXG4gICAgZGVtb19tb2RlOiAhaXNDb25maWd1cmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIsXG4gICAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WLFxuICB9KTtcbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiY296ZUFQSSIsIlBPU1QiLCJyZXF1ZXN0IiwiZm9ybURhdGEiLCJpbWFnZUZpbGUiLCJnZXQiLCJwcm9tcHRUeXBlIiwidXNlclF1ZXJ5IiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiaXNDb25maWd1cmVkIiwiY29uc29sZSIsImdlbmVyYXRlZFByb21wdCIsImdlbmVyYXRlUHJvbXB0RnJvbUltYWdlIiwibW9kZWwiLCJzdWNjZXNzIiwicHJvbXB0IiwiRXJyb3IiLCJtZXNzYWdlIiwiZGV0YWlscyIsInByb2Nlc3MiLCJ1bmRlZmluZWQiLCJHRVQiLCJkZW1vX21vZGUiLCJlbnZpcm9ubWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/tools/image-to-prompt/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/coze-api.ts":
/*!*****************************!*\
  !*** ./src/lib/coze-api.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CozeAPI: () => (/* binding */ CozeAPI),\n/* harmony export */   cozeAPI: () => (/* binding */ cozeAPI)\n/* harmony export */ });\n/**\n * Coze API Integration Library\n * Handles communication with Coze AI platform for image analysis and prompt generation\n */ class CozeAPI {\n    constructor(config = {}){\n        this.config = {\n            apiKey: config.apiKey || process.env.COZE_API_KEY || \"\",\n            workflowId: config.workflowId || process.env.COZE_WORKFLOW_ID || \"\",\n            baseUrl: config.baseUrl || \"https://api.coze.cn\"\n        };\n        this.baseUrl = this.config.baseUrl || \"https://api.coze.cn\";\n    }\n    /**\n   * Check if the API is properly configured\n   */ isConfigured() {\n        return !!(this.config.apiKey && this.config.workflowId);\n    }\n    /**\n   * Upload a file to Coze\n   */ async uploadFile(file) {\n        if (!this.isConfigured()) {\n            throw new Error(\"Coze API is not properly configured\");\n        }\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        console.log(\"Uploading file to Coze:\", file.name, \"Size:\", file.size);\n        const response = await fetch(`${this.baseUrl}/v1/files/upload`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${this.config.apiKey}`\n            },\n            body: formData\n        });\n        console.log(\"Upload response status:\", response.status);\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"Upload failed with error:\", errorText);\n            throw new Error(`Failed to upload file: ${errorText}`);\n        }\n        const result = await response.json();\n        console.log(\"Upload response:\", JSON.stringify(result, null, 2));\n        // Check different possible response formats\n        // Format 1: { code: 0, data: { id: ... } } (Based on actual response)\n        if (result.code === 0 && result.data?.id) {\n            return result.data.id;\n        }\n        // Format 2: { code: 0, data: { file_info: { id: ... } } }\n        if (result.code === 0 && result.data?.file_info?.id) {\n            return result.data.file_info.id;\n        }\n        // Format 3: { id: ... } (direct file ID)\n        if (result.id) {\n            return result.id;\n        }\n        // Format 4: { file_id: ... }\n        if (result.file_id) {\n            return result.file_id;\n        }\n        // If none of the expected formats, log the actual response\n        console.error(\"Unexpected upload response format:\", result);\n        throw new Error(`No file ID found in response. Response: ${JSON.stringify(result)}`);\n    }\n    /**\n   * Run a workflow with parameters\n   */ async runWorkflow(parameters) {\n        if (!this.isConfigured()) {\n            throw new Error(\"Coze API is not properly configured\");\n        }\n        // Parameters should be passed as an object, not stringified\n        const requestBody = {\n            workflow_id: this.config.workflowId,\n            parameters: parameters\n        };\n        console.log(\"Running workflow with params:\", JSON.stringify(requestBody, null, 2));\n        const response = await fetch(`${this.baseUrl}/v1/workflow/run`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${this.config.apiKey}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(requestBody)\n        });\n        console.log(\"Workflow response status:\", response.status);\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"Workflow failed with error:\", errorText);\n            throw new Error(`Failed to run workflow: ${errorText}`);\n        }\n        const result = await response.json();\n        console.log(\"Workflow response:\", JSON.stringify(result, null, 2));\n        if (result.code !== 0) {\n            throw new Error(`Workflow execution failed: ${result.msg}`);\n        }\n        // If workflow is asynchronous, poll for completion\n        if (result.data?.execute_id && result.data?.status !== \"completed\") {\n            return await this.pollWorkflowResult(result.data.execute_id);\n        }\n        // Parse the data field if it's a JSON string\n        if (typeof result.data === \"string\") {\n            try {\n                return JSON.parse(result.data);\n            } catch (e) {\n                return result.data;\n            }\n        }\n        return result.data;\n    }\n    /**\n   * Poll for workflow result\n   */ async pollWorkflowResult(executeId, maxAttempts = 30) {\n        for(let attempt = 0; attempt < maxAttempts; attempt++){\n            await new Promise((resolve)=>setTimeout(resolve, 1000)); // Wait 1 second\n            const response = await fetch(`${this.baseUrl}/v1/workflow/run/${executeId}`, {\n                headers: {\n                    \"Authorization\": `Bearer ${this.config.apiKey}`\n                }\n            });\n            if (!response.ok) {\n                continue; // Retry on network errors\n            }\n            const result = await response.json();\n            if (result.data?.status === \"completed\") {\n                return result.data;\n            } else if (result.data?.status === \"failed\") {\n                throw new Error(\"Workflow execution failed\");\n            }\n        }\n        throw new Error(\"Workflow execution timeout\");\n    }\n    /**\n   * Generate prompt from image\n   */ async generatePromptFromImage(imageFile, options = {}) {\n        console.log(\"Processing image:\", imageFile.name, \"Size:\", imageFile.size);\n        // Workflow expects: userQuery, img, promptType\n        // First upload the file to get a file_id\n        const fileId = await this.uploadFile(imageFile);\n        console.log(\"File uploaded with ID:\", fileId);\n        // Parameters should be passed as an object with img containing file_id object\n        const workflowParams = {\n            userQuery: options.userQuery || \"Generate a detailed AI image prompt for this uploaded image\",\n            img: {\n                file_id: fileId\n            },\n            promptType: options.model || \"normal\"\n        };\n        console.log(\"Running workflow with correct params:\", workflowParams);\n        try {\n            const workflowResult = await this.runWorkflow(workflowParams);\n            return this.extractPromptFromResult(workflowResult);\n        } catch (error) {\n            console.error(\"Workflow execution failed:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Extract prompt from workflow result\n   */ extractPromptFromResult(workflowResult) {\n        console.log(\"Extracting prompt from result:\", JSON.stringify(workflowResult, null, 2));\n        // Parse the data field if it's a string (workflow returns JSON string in data field)\n        let workflowData = workflowResult;\n        if (typeof workflowResult === \"string\") {\n            try {\n                workflowData = JSON.parse(workflowResult);\n            } catch (e) {\n            // If not JSON, use as-is\n            }\n        }\n        // Check for prompt in various locations\n        // The workflow returns data as a JSON string with output1 or outpu2 field containing the prompt\n        let prompt = \"\";\n        if (workflowData.output1) {\n            prompt = workflowData.output1;\n        } else if (workflowData.outpu2) {\n            prompt = workflowData.outpu2;\n        } else if (workflowData.output2) {\n            prompt = workflowData.output2;\n        } else if (workflowData.output) {\n            prompt = workflowData.output;\n        } else {\n            prompt = workflowResult.output?.prompt || workflowResult.result?.prompt || workflowResult.data?.prompt || workflowResult.data?.output || workflowResult.data?.result || workflowResult.prompt || workflowResult.text || workflowResult.message || \"\";\n        }\n        if (!prompt) {\n            console.error(\"Could not find prompt in result:\", workflowResult);\n            throw new Error(`No prompt found in workflow result. Available keys: ${Object.keys(workflowResult).join(\", \")}`);\n        }\n        console.log(\"Extracted prompt:\", prompt);\n        return prompt;\n    }\n}\n// Export a singleton instance\nconst cozeAPI = new CozeAPI();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/coze-api.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftools%2Fimage-to-prompt%2Froute&page=%2Fapi%2Ftools%2Fimage-to-prompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftools%2Fimage-to-prompt%2Froute.ts&appDir=D%3A%5Cweb_sailing%5CimagePrompt-main%5CimagePrompt-main%5Capps%5Cnextjs%5Csrc%5Capp&pageExtensions=ts&pageExtensions=tsx&pageExtensions=mdx&rootDir=D%3A%5Cweb_sailing%5CimagePrompt-main%5CimagePrompt-main%5Capps%5Cnextjs&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();